const { States, userStates, sobrietyTracker } = require("../utils/constants");
const { sendMainMenu, checkSobrietyStatus } = require("../utils/helpers");

async function handleSobrietyMenu(bot, chatId, action) {
  switch (action) {
    case undefined:  // –ï—Å–ª–∏ action –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
      const mainMenuOpts = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: "–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç", callback_data: "start_sobriety_count" }],
            [{ text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data: "check_sobriety_status" }],
            [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }),
      };
      await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuOpts);
      break;

    case "start_sobriety_count":
      if (sobrietyTracker[chatId]) {
        userStates[chatId].state = States.SOBRIETY_CONFIRM_RESET;
        const resetOpts = {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [{ text: "–î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data: "confirm_reset" }],
              [{ text: "–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç", callback_data: "continue_count" }],
              [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }),
        };
        await bot.sendMessage(
          chatId,
          "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—Å—á–µ—Ç. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
          resetOpts
        );
      } else {
        sobrietyTracker[chatId] = Date.now();
        await bot.sendMessage(
          chatId,
          "–û—Ç—Å—á–µ—Ç –¥–Ω–µ–π —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π! üí™"
        );
        await handleSobrietyMenu(bot, chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –æ—Ç—Å—á–µ—Ç–∞
      }
      break;

    case "confirm_reset":
      sobrietyTracker[chatId] = Date.now();
      await bot.sendMessage(
        chatId,
        "–û—Ç—Å—á–µ—Ç –¥–Ω–µ–π —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ! üí™"
      );
      await handleSobrietyMenu(bot, chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
      break;

    case "continue_count":
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç."
      );
      await handleSobrietyMenu(bot, chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      break;

    case "check_sobriety_status":
      await checkSobrietyStatus(bot, chatId);
      await handleSobrietyMenu(bot, chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
      break;

    case "main_menu":
      await handleSobrietyMenu(bot, chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      break;

    default:
      await bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."
      );
      await handleSobrietyMenu(bot, chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      break;
  }
}

module.exports = { handleSobrietyMenu };