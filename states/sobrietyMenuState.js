const { States, userStates, sobrietyTracker } = require("../utils/constants");
const { sendMainMenu, checkSobrietyStatus } = require("../utils/helpers");

async function handleSobrietyMenu(bot, chatId, action) {
  switch (action) {
    case "–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç":
      if (sobrietyTracker[chatId]) {
        userStates[chatId].state = States.SOBRIETY_CONFIRM_RESET;
        const opts = {
          reply_markup: JSON.stringify({
            keyboard: [
              ["–î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
              ["–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç"],
              ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          }),
        };
        await bot.sendMessage(
          chatId,
          "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—Å—á–µ—Ç. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
          opts
        );
      } else {
        sobrietyTracker[chatId] = Date.now();
        await bot.sendMessage(
          chatId,
          "–û—Ç—Å—á–µ—Ç –¥–Ω–µ–π —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π! üí™"
        );
        sendMainMenu(bot, chatId, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?");
      }
      break;
    case "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
      await checkSobrietyStatus(bot, chatId);
      break;
    case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
      sendMainMenu(bot, chatId, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?");
      break;
    default:
      await bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."
      );
      sendMainMenu(bot, chatId, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?");
      break;
  }
}

module.exports = { handleSobrietyMenu };
