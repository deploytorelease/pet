const OpenAI = require("openai");
const { weatherService, geocodingService } = require('../utils/weatherServiceInstance');
const { sendMainMenu } = require('../utils/helpers');
const { States, userStates } = require('../utils/constants');

const openai = new OpenAI({
  apiKey: process.env.CHATGPT_API_KEY,
});

async function handleFreeInputDialog(bot, chatId, initialInput) {
    console.log(`Starting handleFreeInputDialog for chatId: ${chatId}, input: ${initialInput}`);
    
    if (initialInput === "üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å") {
      userStates[chatId] = { state: States.FREE_INPUT, stage: 'awaiting_input' };
      await bot.sendMessage(chatId, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ –≤–∏–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–ª–∏ –≤ –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ–≥–æ –ø–∏—Ç—å. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.");
      return;
    }
  
    const inputAnalysis = await analyzeUserInput(initialInput);
    
    if (inputAnalysis.isGreeting) {
      await handleGreeting(bot, chatId);
    } else if (inputAnalysis.isRelevant) {
      await processWineRequest(bot, chatId, initialInput);
    } else {
      const friendlyResponse = await generateFriendlyResponse(initialInput);
      userStates[chatId] = { state: States.FREE_INPUT, stage: 'awaiting_clarification' };
      await bot.sendMessage(chatId, friendlyResponse);
    }
  }
  
  
  async function handleGreeting(bot, chatId) {
    const greetingMessage = `
  –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–æ–º–µ–ª—å–µ, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–Ω–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
  
  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∏–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ —Å–∏—Ç—É–∞—Ü–∏–∏
  ‚Ä¢ –£—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–Ω–∞
  ‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–∏–Ω–∞ —Å –µ–¥–æ–π
  ‚Ä¢ –î–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Ä—Ç–∞—Ö –≤–∏–Ω
  
–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ, –∫–∞–∫–æ–µ –≤–∏–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–ª–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ —Å–ª—É—á–∞—è –≤–∞–º –Ω—É–∂–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è. –Ø —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É!
    `;
  
    await bot.sendMessage(chatId, greetingMessage);
    await sendMainMenu(bot, chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ:");
  }
  

async function continueFreeInputDialog(bot, chatId, input) {
  const { stage, initialInput } = userStates[chatId];
  if (stage === 'awaiting_city') {
    await processRecommendation(bot, chatId, initialInput, input);
  } else if (stage === 'awaiting_clarification') {
    const inputAnalysis = await analyzeUserInput(input);
    if (inputAnalysis.isRelevant) {
      const city = await extractCity(input);
      if (!city) {
        userStates[chatId] = { state: States.FREE_INPUT, stage: 'awaiting_city', initialInput: input };
        await bot.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.");
      } else {
        await processRecommendation(bot, chatId, input, city);
      }
    } else {
      const friendlyResponse = await generateFriendlyResponse(input, true);
      await bot.sendMessage(chatId, friendlyResponse);
      userStates[chatId] = { state: States.IDLE };
      await sendMainMenu(bot, chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    }
  }
}

async function processWineRequest(bot, chatId, input) {
    const city = await extractCity(input);
    if (!city) {
      userStates[chatId] = { state: States.FREE_INPUT, stage: 'awaiting_city', initialInput: input };
      await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.");
    } else {
      await processRecommendation(bot, chatId, input, city);
    }
  }

  async function handleVagueResponse(bot, chatId) {
    const response = await generateFriendlyResponse("–≤–∞–≥—É–µ", true);
    await bot.sendMessage(chatId, response);
    userStates[chatId] = { state: States.FREE_INPUT, stage: 'awaiting_input' };
  }

async function analyzeUserInput(input) {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "–í—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º, –∑–∞–ø—Ä–æ—Å–æ–º –æ –≤–∏–Ω–µ –∏–ª–∏ —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º. –û—Ç–≤–µ—Ç—å—Ç–µ JSON-–æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏ isGreeting (boolean), isRelevant (boolean) –∏ explanation (string)."
        },
        {
          role: "user",
          content: input
        }
      ],
      max_tokens: 100
    });

    return JSON.parse(completion.choices[0].message.content);
  } catch (error) {
    console.error('Error analyzing user input:', error);
    return { isGreeting: false, isRelevant: false, explanation: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥" };
  }
}

async function generateFriendlyResponse(input, isVague = false) {
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-2024-08-06",
        messages: [
          {
            role: "system",
            content: `–í—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç-—Å–æ–º–µ–ª—å–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤–µ—Ç–ª–∏–≤–æ –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –≤–∏–Ω–∞. 
            ${isVague ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ª—é–±–æ–µ' –∏–ª–∏ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã'). –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏." : ""}
            –ù–µ –∏–∑–≤–∏–Ω—è–π—Ç–µ—Å—å –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—Ä–∞–∑—É "—è –Ω–µ –ø–æ–Ω—è–ª". –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ —Ç–µ–º–µ –≤–∏–Ω–∞.`
          },
          {
            role: "user",
            content: input
          }
        ],
        max_tokens: 150
      });
  
      return completion.choices[0].message.content.trim();
    } catch (error) {
      console.error('Error generating friendly response:', error);
      return "–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∏–Ω–µ? –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?";
    }
  }


async function processRecommendation(bot, chatId, initialInput, city) {
  const weather = await getWeatherInfo(city);
  const recommendation = await generateRecommendation(initialInput, city, weather);

  await bot.sendMessage(chatId, recommendation, { parse_mode: 'Markdown' });
  
  userStates[chatId] = { state: States.IDLE };
  await sendMainMenu(bot, chatId, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?");
  console.log(`Finishing handleFreeInputDialog for chatId: ${chatId}`);
}

async function extractCity(input) {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "system",
          content: "–ò–∑–≤–ª–µ–∫–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ 'null', –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω."
        },
        {
          role: "user",
          content: input
        }
      ],
      max_tokens: 50
    });
    const city = completion.choices[0].message.content.trim();
    return city !== 'null' ? city : null;
  } catch (error) {
    console.error('Error extracting city:', error);
    return null;
  }
}

async function generateRecommendation(input, city, weather) {
    const weatherInfo = weather ? 
      `–ü–æ–≥–æ–¥–∞ –≤ *${city}*: ${weather.temperature}¬∞C, ${weather.description}` :
      "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
  
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-2024-08-06",
        messages: [
          {
            role: "system",
            content: `–í—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π —Å–æ–º–µ–ª—å–µ, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–Ω—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
            –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º–∏ –∏ –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–º–∏, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω–æ—Å—Ç–∏. 
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
            - –í—ã–¥–µ–ª—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–Ω –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º: **–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞**
            - –í—ã–¥–µ–ª—è–π—Ç–µ –≥–æ—Ä–æ–¥–∞ –∫—É—Ä—Å–∏–≤–æ–º: *–≥–æ—Ä–æ–¥*
            - –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –≤–∫—É—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: _—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞_
            
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
            1. –ö—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –≤–∏–Ω–∞
            2. *–í–∏–Ω–æ:* [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞]
            3. *–í–∫—É—Å –∏ –∞—Ä–æ–º–∞—Ç:* [–æ–ø–∏—Å–∞–Ω–∏–µ]
            4. *–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –∏ —Å–æ—á–µ—Ç–∞–Ω–∏–µ:* [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
            5. *–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞:* [—Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω]
            6. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞
            
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è (###) –≤ —Ç–µ–∫—Å—Ç–µ.`
          },
          {
            role: "user",
            content: `
              –ú–Ω–µ –Ω—É–∂–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–∏–Ω—É. –í–æ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å:
              –ú–æ–π –∑–∞–ø—Ä–æ—Å: ${input}
              ${weatherInfo}
  
              –ü–æ—Å–æ–≤–µ—Ç—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–Ω–æ, –æ–ø–∏—à–∏ –µ–≥–æ –≤–∫—É—Å –∏ –∞—Ä–æ–º–∞—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –µ–≥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å. 
              –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ—á–µ–º—É –æ–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –ø–æ–≥–æ–¥–µ –∏ –º–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É, —Å —á–µ–º –µ–≥–æ –ª—É—á—à–µ –ø–æ–¥–∞–≤–∞—Ç—å –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É. 
              –°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∂–∏–≤—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ –≤–æ—Å—Ç–æ—Ä–≥–∞.
            `
          }
        ],
        max_tokens: 500
      });
  
      return completion.choices[0].message.content.trim();
    } catch (error) {
      console.error('Error generating recommendation:', error);
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–Ω–æ. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?";
    }
  }
  
async function getWeatherInfo(city) {
  if (!geocodingService || typeof geocodingService.getCoordinates !== 'function') {
    console.error('geocodingService is not properly initialized');
    return null;
  }

  try {
    const coordinates = await geocodingService.getCoordinates(city);
    if (!coordinates) {
      console.log(`Coordinates not found for city: ${city}`);
      return null;
    }

    return await weatherService.getWeather(coordinates.lat, coordinates.lon);
  } catch (error) {
    console.error(`Error getting weather info for ${city}:`, error);
    return null;
  }
}

module.exports = { handleFreeInputDialog, continueFreeInputDialog };