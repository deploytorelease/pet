const { States, userStates, sobrietyTracker, userCities } = require('./constants');
const OpenAI = require("openai");
const { weatherService, geocodingService } = require('./weatherServiceInstance');

const openai = new OpenAI({
  apiKey: process.env.CHATGPT_API_KEY,
});

function sendMainMenu(bot, chatId, message) {
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["üç∑ –í—ã–±—Ä–∞—Ç—å –≤–∏–Ω–æ"],
        ["üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å"],
        ["üö± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏"],
        ["üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    }),
  };
  userStates[chatId] = { state: States.IDLE };
  bot.sendMessage(chatId, message, opts);
}

function sendHelp(bot, chatId) {
  const helpText = `
  –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
  üç∑ –í—ã–±—Ä–∞—Ç—å –≤–∏–Ω–æ - —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–Ω–æ —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥—ã –∏ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–Ω–æ
  üö± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ - –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–∏ –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è
  ‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

  –ö–æ–º–∞–Ω–¥—ã:
  /start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
  /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

  –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤—ã–±–æ—Ä–∞ –≤–∏–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.
  `;
  bot.sendMessage(chatId, helpText);
}

async function startWineSelection(bot, chatId) {
  if (!userCities[chatId]) {
    userCities[chatId] = null;
  }
  const savedCity = userCities[chatId];
  
  if (savedCity) {
    await updateWeatherAndProceed(bot, chatId, savedCity);
  } else {
    userStates[chatId] = { state: States.AWAITING_CITY };
    await bot.sendMessage(
      chatId,
      "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤–∏–Ω–æ. –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
      { reply_markup: { remove_keyboard: true } }
    );
  }
}

async function updateWeatherAndProceed(bot, chatId, city) {
  const coordinates = await geocodingService.getCoordinates(city);
  if (!coordinates) {
    await bot.sendMessage(
      chatId,
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑.`
    );
    userStates[chatId] = { state: States.AWAITING_CITY };
    return;
  }

  const weatherData = await weatherService.getWeather(coordinates.lat, coordinates.lon);
  if (weatherData) {
    userStates[chatId] = {
      state: States.AWAITING_MOOD,
      city: city,
      weather: weatherData,
    };
    await bot.sendMessage(
      chatId,
      `–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ ${city}: ${weatherData.temperature}¬∞C, ${weatherData.description}. –ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?`
    );
  } else {
    await bot.sendMessage(
      chatId,
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–≥–æ–¥—É —Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ").`
    );
    userStates[chatId] = { state: States.AWAITING_MANUAL_WEATHER };
  }
}
async function updateWeatherAndProceed(bot, chatId, city) {
  console.log(`Updating weather for ${chatId} in city ${city}`);
  try {
    const coordinates = await geocodingService.getCoordinates(city);
    console.log(`Coordinates for ${city}:`, coordinates);
    if (!coordinates) {
      await bot.sendMessage(
        chatId,
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑.`
      );
      userStates[chatId] = { state: States.AWAITING_CITY };
      return;
    }

    const weatherData = await weatherService.getWeather(coordinates.lat, coordinates.lon);
    console.log(`Weather data for ${city}:`, weatherData);
    if (weatherData) {
      userStates[chatId] = {
        state: States.AWAITING_MOOD,
        city: city,
        weather: weatherData,
      };

      // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π
      const weatherMessage = `
*${city}*:
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.temperature}¬∞C
üå•Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${weatherData.feelsLike}¬∞C
üå¶Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: ${weatherData.description.charAt(0).toUpperCase() + weatherData.description.slice(1)}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weatherData.humidity}%
üå¨Ô∏è –í–µ—Ç–µ—Ä: ${weatherData.windSpeed} –º/—Å

–ö–∞–∫–æ–µ —É –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?`;

      await bot.sendMessage(chatId, weatherMessage, { parse_mode: 'Markdown' });
    } else {
      await bot.sendMessage(
        chatId,
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–≥–æ–¥—É —Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ").`
      );
      userStates[chatId] = { state: States.AWAITING_MANUAL_WEATHER };
    }
  } catch (error) {
    console.error(`Error in updateWeatherAndProceed for ${chatId}:`, error);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    userStates[chatId] = { state: States.IDLE };
  }
}


function changeCity(bot, chatId) {
  userStates[chatId] = { state: States.AWAITING_CITY };
  bot.sendMessage(
    chatId,
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
    { reply_markup: { remove_keyboard: true } }
  );
}

function startSobrietyTracking(bot, chatId) {
  userStates[chatId] = { state: States.SOBRIETY_MENU };
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç"],
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"],
        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  };
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", opts);
}

function askFoodChoice(bot, chatId) {
  userStates[chatId].state = States.AWAITING_FOOD_CHOICE;
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["–î–∞, –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫ –µ–¥–µ"],
        ["–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –µ–¥—ã"]
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  };
  bot.sendMessage(chatId, "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–Ω–æ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–ª—é–¥—É?", opts);
}

async function generateWineRecommendation(userState) {
  const { weather, mood, wineType, wineSweetness, winePrice } = userState;
  const temperature = weather.temperature;
  const weatherDescription = weather.description;
  const feels_like = weather.feels_like;
  const humidity = weather.humidity;
  const foodType = userState.foodType || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ";

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "system",
          content: `–í—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π —Å–æ–º–µ–ª—å–µ, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–Ω—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
            –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º–∏ –∏ –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–º–∏, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω–æ—Å—Ç–∏.
            –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞ –¥–∞–≤–∞—Ç—å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ. 
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
            - –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–π –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            - –í—ã–¥–µ–ª—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–Ω –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º: **–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞**
            - –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –≤–∫—É—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: _—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞_
            
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
            1. –ö—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –≤–∏–Ω–∞
            2. *–í–∏–Ω–æ:* [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞]
            3. *–í–∫—É—Å –∏ –∞—Ä–æ–º–∞—Ç:* [–æ–ø–∏—Å–∞–Ω–∏–µ]
            4. *–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –∏ —Å–æ—á–µ—Ç–∞–Ω–∏–µ:* [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
            5. *–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞:* [—Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω]
            6. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞
            
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ.
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è (###) –≤ —Ç–µ–∫—Å—Ç–µ.`
        },
        {
          role: "user",
          content: `–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –≤–∏–Ω–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö:
          –ü–æ–≥–æ–¥–∞: ${temperature}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feels_like}¬∞C, ${weatherDescription}
          –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%
          –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood}
          –¢–∏–ø –≤–∏–Ω–∞: ${wineType}
          –°–ª–∞–¥–æ—Å—Ç—å: ${wineSweetness}
          –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${winePrice}
          –ë–ª—é–¥–æ: ${foodType}
          –ü–æ—Å–æ–≤–µ—Ç—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–Ω–æ, –æ–ø–∏—à–∏ –µ–≥–æ –≤–∫—É—Å –∏ –∞—Ä–æ–º–∞—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –µ–≥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å. 
          –ü–æ–ª—å–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
          –°–æ—á–µ—Ç–∞–Ω–∏–µ —Å –µ–¥–æ–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –±–ª—é–¥–æ) –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é —Å –µ–¥–æ–π (–µ—Å–ª–∏ –±–ª—é–¥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ).
          –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ—á–µ–º—É –æ–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –ø–æ–≥–æ–¥–µ –∏ –º–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É. 
          –°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∂–∏–≤—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ –≤–æ—Å—Ç–æ—Ä–≥–∞.`,
        },
      ],
      max_tokens: 600,
    });
    return completion.choices[0].message.content.trim();
  } catch (error) {
    console.error("Error generating wine recommendation:", error);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.";
  }
}

function extractTemperature(weatherDescription) {
  const match = weatherDescription.match(/(-?\d+(\.\d+)?)/);
  return match ? parseFloat(match[0]) : null;
}

async function checkSobrietyStatus(bot, chatId) {
  if (sobrietyTracker[chatId]) {
    const seconds = Math.floor((Date.now() - sobrietyTracker[chatId]) / 1000);
    if (seconds < 60) {
      await bot.sendMessage(chatId, `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${seconds} —Å–µ–∫—É–Ω–¥! –ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ - —ç—Ç–æ —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`);
    } else if (seconds < 3600) {
      const minutes = Math.floor(seconds / 60);
      await bot.sendMessage(chatId, `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${minutes} –º–∏–Ω—É—Ç! –í—ã –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üåü`);
    } else {
      const hours = Math.floor(seconds / 3600);
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;

      let message = "";
      if (days > 0) {
        message = `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${days} –¥–Ω–µ–π –∏ ${remainingHours} —á–∞—Å–æ–≤! –≠—Ç–æ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! üèÜ`;
      } else {
        message = `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${hours} —á–∞—Å–æ–≤! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üåü`;
      }

      await bot.sendMessage(chatId, message);
    }
  } else {
    await bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ—Ç—Å—á–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏.');
  }
}

module.exports = { sendMainMenu, sendHelp, startWineSelection, startSobrietyTracking, generateWineRecommendation, extractTemperature, checkSobrietyStatus, askFoodChoice, changeCity, updateWeatherAndProceed, updateWeatherAndProceed };