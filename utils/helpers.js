const { States, userStates, sobrietyTracker } = require('./constants');
const OpenAI = require("openai");

const openai = new OpenAI({
  apiKey: process.env.CHATGPT_API_KEY,
});

function sendMainMenu(bot, chatId, message) {
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["üç∑ –í—ã–±—Ä–∞—Ç—å –≤–∏–Ω–æ"],
        ["üö± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    }),
  };
  userStates[chatId] = { state: States.IDLE };
  bot.sendMessage(chatId, message, opts);
}

function sendHelp(bot, chatId) {
  const helpText = `
  –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
  üç∑ –í—ã–±—Ä–∞—Ç—å –≤–∏–Ω–æ - —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–Ω–æ —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥—ã –∏ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  üö± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ - –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–∏ –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è
  ‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

  –ö–æ–º–∞–Ω–¥—ã:
  /start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
  /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

  –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.
  `;
  bot.sendMessage(chatId, helpText);
}

function startWineSelection(bot, chatId) {
  userStates[chatId] = { state: States.AWAITING_CITY };
  bot.sendMessage(
    chatId,
    "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤–∏–Ω–æ. –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
    { reply_markup: { remove_keyboard: true } }
  );
}

function startSobrietyTracking(bot, chatId) {
  userStates[chatId] = { state: States.SOBRIETY_MENU };
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç"],
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"],
        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  };
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", opts);
}

function askFoodChoice(bot, chatId) {
  userStates[chatId].state = States.AWAITING_FOOD_CHOICE;
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["–î–∞, –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫ –µ–¥–µ"],
        ["–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –µ–¥—ã"]
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  };
  bot.sendMessage(chatId, "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–Ω–æ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–ª—é–¥—É?", opts);
}

async function generateWineRecommendation(userState) {
  const { weather, mood, wineType, wineSweetness, winePrice } = userState;
  const temperature = weather.temperature;
  const weatherDescription = weather.description;
  const feels_like = weather.feels_like;
  const humidity = weather.humidity;
  const foodType = userState.foodType || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ";

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–Ω–∞–º, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        },
        {
          role: "user",
          content: `–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –≤–∏–Ω–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö:
          –ü–æ–≥–æ–¥–∞: ${temperature}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feels_like}¬∞C, ${weatherDescription}
          –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%
          –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood}
          –¢–∏–ø –≤–∏–Ω–∞: ${wineType}
          –°–ª–∞–¥–æ—Å—Ç—å: ${wineSweetness}
          –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${winePrice}
          –ë–ª—é–¥–æ: ${foodType}
          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–Ω–∞ –∏ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
          –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
          –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∏–Ω–æ "–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞".
          –¢–∏–ø –≤–∏–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏ –≤–∫—É—Å–∞.
          –ï–≥–æ —Ç–µ–∫—Å—Ç—É—Ä–∞ –∏ –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å.
          –ü–æ–ª—å–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
          –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.
          –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã.
          –°–æ—á–µ—Ç–∞–Ω–∏–µ —Å –µ–¥–æ–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –±–ª—é–¥–æ) –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é —Å –µ–¥–æ–π (–µ—Å–ª–∏ –±–ª—é–¥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ).
          –¶–µ–Ω–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.
          –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤.
          –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞.`,
        },
      ],
      max_tokens: 600,
    });
    return completion.choices[0].message.content.trim();
  } catch (error) {
    console.error("Error generating wine recommendation:", error);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.";
  }
}

function extractTemperature(weatherDescription) {
  const match = weatherDescription.match(/(-?\d+(\.\d+)?)/);
  return match ? parseFloat(match[0]) : null;
}

async function checkSobrietyStatus(bot, chatId) {
  if (sobrietyTracker[chatId]) {
    const seconds = Math.floor((Date.now() - sobrietyTracker[chatId]) / 1000);
    if (seconds < 60) {
      await bot.sendMessage(chatId, `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${seconds} —Å–µ–∫—É–Ω–¥! –ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ - —ç—Ç–æ —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`);
    } else if (seconds < 3600) {
      const minutes = Math.floor(seconds / 60);
      await bot.sendMessage(chatId, `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${minutes} –º–∏–Ω—É—Ç! –í—ã –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üåü`);
    } else {
      const hours = Math.floor(seconds / 3600);
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;

      let message = "";
      if (days > 0) {
        message = `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${days} –¥–Ω–µ–π –∏ ${remainingHours} —á–∞—Å–æ–≤! –≠—Ç–æ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! üèÜ`;
      } else {
        message = `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${hours} —á–∞—Å–æ–≤! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üåü`;
      }

      await bot.sendMessage(chatId, message);
    }
  } else {
    await bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ—Ç—Å—á–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏.');
  }
}

module.exports = { sendMainMenu, sendHelp, startWineSelection, startSobrietyTracking, generateWineRecommendation, extractTemperature, checkSobrietyStatus, askFoodChoice };