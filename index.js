require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const OpenAI = require("openai");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.CHATGPT_API_KEY,
});

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};
const sobrietyTracker = {};
const userPreferences = {};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
const States = {
  IDLE: "IDLE",
  AWAITING_CITY: "AWAITING_CITY",
  AWAITING_MANUAL_WEATHER: "AWAITING_MANUAL_WEATHER",
  AWAITING_MOOD: "AWAITING_MOOD",
  AWAITING_WINE_TYPE: "AWAITING_WINE_TYPE",
  AWAITING_WINE_SWEETNESS: "AWAITING_WINE_SWEETNESS",
  AWAITING_WINE_PRICE: "AWAITING_WINE_PRICE",
  GENERATING_RECOMMENDATION: "GENERATING_RECOMMENDATION",
  SOBRIETY_MENU: "SOBRIETY_MENU",
  SOBRIETY_CONFIRM_RESET: "SOBRIETY_CONFIRM_RESET",
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  sendMainMenu(
    chatId,
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–Ω–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
  );
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  sendHelp(chatId);
});

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "/start") return;

  const currentState = userStates[chatId]?.state || States.IDLE;
  if (currentState === States.IDLE) {
    handleIdleState(chatId, text);
  } else {
  switch (currentState) {
    case States.IDLE:
      handleIdleState(chatId, text);
      break;
    case States.AWAITING_CITY:
      await handleCityInput(chatId, text);
      break;
    case States.AWAITING_MANUAL_WEATHER:
      await handleManualWeatherInput(chatId, text);
      break;
    case States.AWAITING_MOOD:
      await handleMoodInput(chatId, text);
      break;
    case States.AWAITING_WINE_TYPE:
      await handleWineTypeInput(chatId, text);
      break;
    case States.AWAITING_WINE_SWEETNESS:
      await handleWineSweetnessInput(chatId, text);
      break;
    case States.AWAITING_WINE_PRICE:
      await handleWinePriceInput(chatId, text);
      break;
    case States.SOBRIETY_MENU:
      await handleSobrietyMenu(chatId, text);
      break;
    case States.SOBRIETY_CONFIRM_RESET:
      await handleSobrietyConfirmReset(chatId, text);
      break;
    default:
      bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é."
      );
      break;
  }
}
});

function sendMainMenu(chatId, message) {
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["üç∑ –í—ã–±—Ä–∞—Ç—å –≤–∏–Ω–æ"],
        ["üö± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    }),
  };
  userStates[chatId] = { state: States.IDLE }; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ IDLE
  bot.sendMessage(chatId, message, opts);
}

function handleIdleState(chatId, text) {
  switch (text) {
    case "üç∑ –í—ã–±—Ä–∞—Ç—å –≤–∏–Ω–æ":
      startWineSelection(chatId);
      break;
    case "üö± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏":
      startSobrietyTracking(chatId);
      break;
    case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
      sendHelp(chatId);
      break;
    case "–û—Ç–º–µ–Ω–∞":
      sendMainMenu(
        chatId,
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
      );
      break;
    default:
      bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é."
      );
      break;
  }
}

function startWineSelection(chatId) {
  userStates[chatId] = { state: States.AWAITING_CITY };
  bot.sendMessage(
    chatId,
    "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤–∏–Ω–æ. –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
    { reply_markup: { remove_keyboard: true } }
  );
}

function startSobrietyTracking(chatId) {
  userStates[chatId] = { state: States.SOBRIETY_MENU };
  const opts = {
    reply_markup: JSON.stringify({
      keyboard: [
        ["–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç"],
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"],
        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    }),
  };
  bot.sendMessage(
    chatId,
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏:",
    opts
  );
}

async function handleSobrietyMenu(chatId, action) {
  switch (action) {
    case "–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç":
      if (sobrietyTracker[chatId]) {
        userStates[chatId].state = States.SOBRIETY_CONFIRM_RESET;
        const opts = {
          reply_markup: JSON.stringify({
            keyboard: [
              ["–î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
              ["–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç"],
              ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          }),
        };
        await bot.sendMessage(
          chatId,
          "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—Å—á–µ—Ç. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
          opts
        );
      } else {
        sobrietyTracker[chatId] = Date.now();
        await bot.sendMessage(
          chatId,
          "–û—Ç—Å—á–µ—Ç –¥–Ω–µ–π —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π! üí™"
        );
        startSobrietyTracking(chatId);
      }
      break;
    case "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
      await checkSobrietyStatus(chatId);
      break;
    case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
      sendMainMenu(chatId, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?");
      break;
    default:
      await bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."
      );
      startSobrietyTracking(chatId);
      break;
  }
}

async function handleSobrietyConfirmReset(chatId, action) {
  switch (action) {
    case "–î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
      sobrietyTracker[chatId] = Date.now();
      await bot.sendMessage(
        chatId,
        "–û—Ç—Å—á–µ—Ç –¥–Ω–µ–π —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ. –ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üåü"
      );
      break;
    case "–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç":
      await bot.sendMessage(
        chatId,
        "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. –í–∞—à —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
      );
      break;
    case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
      sendMainMenu(chatId, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?");
      return;
  }
  startSobrietyTracking(chatId);
}

async function checkSobrietyStatus(chatId) {
  if (sobrietyTracker[chatId]) {
    const seconds = Math.floor((Date.now() - sobrietyTracker[chatId]) / 1000);
    if (seconds < 60) {
      await bot.sendMessage(
        chatId,
        `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${seconds} —Å–µ–∫—É–Ω–¥! –ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ - —ç—Ç–æ —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`
      );
    } else if (seconds < 3600) {
      const minutes = Math.floor(seconds / 60);
      await bot.sendMessage(
        chatId,
        `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${minutes} –º–∏–Ω—É—Ç! –í—ã –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üåü`
      );
    } else {
      const hours = Math.floor(seconds / 3600);
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;

      let message = "";
      if (days > 0) {
        message = `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${days} –¥–Ω–µ–π –∏ ${remainingHours} —á–∞—Å–æ–≤! –≠—Ç–æ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! üèÜ`;
      } else {
        message = `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å —É–∂–µ ${hours} —á–∞—Å–æ–≤! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üåü`;
      }

      await bot.sendMessage(chatId, message);
    }
  } else {
    await bot.sendMessage(
      chatId,
      '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ—Ç—Å—á–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏.'
    );
  }
}

function sendHelp(chatId) {
  const helpText = `
–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
üç∑ –í—ã–±—Ä–∞—Ç—å –≤–∏–Ω–æ - —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–Ω–æ —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥—ã –∏ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
üö± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ - –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–∏ –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è
‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.
  `;
  bot.sendMessage(chatId, helpText);
}

async function getWeather(city) {
  try {
    const response = await axios.get(
      `http://api.openweathermap.org/data/2.5/weather`,
      {
        params: {
          q: city,
          appid: process.env.OPENWEATHER_API_KEY,
          units: "metric",
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error("Error fetching weather data:", error);
    return null;
  }
}

async function handleCityInput(chatId, city) {
  const weatherData = await getWeather(city);
  if (weatherData) {
    const temperature = weatherData.main.temp;
    const weatherDescription = weatherData.weather[0].description;
    await bot.sendMessage(
      chatId,
      `–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∞–º–∏ –≥–æ—Ä–æ–¥–µ: ${temperature}¬∞C, ${weatherDescription}`
    );

    userStates[chatId] = {
      state: States.AWAITING_MOOD,
      city: city,
      weather: weatherData,
    };
    await bot.sendMessage(chatId, "–ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?");
  } else {
    await bot.sendMessage(
      chatId,
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–≥–æ–¥—É —Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ").`
    );
    userStates[chatId] = { state: States.AWAITING_MANUAL_WEATHER };
  }
}

async function generateWineRecommendation(userState) {
  const { weather, mood, wineType, wineSweetness, winePrice } = userState;
  const temperature = weather.main.temp;
  const weatherDescription = weather.weather[0].description;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content:
            "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–Ω–∞–º, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        },
        {
            role: "user",
            content: `–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –≤–∏–Ω–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö:
            –ü–æ–≥–æ–¥–∞: ${temperature}¬∞C, ${weatherDescription}
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood}
            –¢–∏–ø –≤–∏–Ω–∞: ${wineType}
            –°–ª–∞–¥–æ—Å—Ç—å: ${wineSweetness}
            –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${winePrice}
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–Ω–∞ –∏ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
            –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
            –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∏–Ω–æ "–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞".
            –¢–∏–ø –≤–∏–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏ –≤–∫—É—Å–∞.
            –ï–≥–æ —Ç–µ–∫—Å—Ç—É—Ä–∞ –∏ –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å.
            –ü–æ–ª—å–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
            –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.
            –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã.
            –¶–µ–Ω–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.
            –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤.
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞.`      },
      ],
      max_tokens: 600,
    });
    return completion.choices[0].message.content.trim();
  } catch (error) {
    console.error("Error generating wine recommendation:", error);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.";
  }
}

async function handleManualWeatherInput(chatId, weatherDescription) {
  userStates[chatId] = {
    state: States.AWAITING_MOOD,
    weather: {
      main: { temp: extractTemperature(weatherDescription) },
      weather: [{ description: weatherDescription }],
    },
  };
  await bot.sendMessage(
    chatId,
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
  );
}

function extractTemperature(weatherDescription) {
  const match = weatherDescription.match(/(-?\d+(\.\d+)?)/);
  return match ? parseFloat(match[0]) : null;
}

async function handleMoodInput(chatId, mood) {
  userStates[chatId].mood = mood;
  userStates[chatId].state = States.AWAITING_WINE_TYPE;
  await bot.sendMessage(chatId, "–ö–∞–∫–æ–π —Ç–∏–ø –≤–∏–Ω–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", {
    reply_markup: JSON.stringify({
      keyboard: [["–ö—Ä–∞—Å–Ω–æ–µ", "–ë–µ–ª–æ–µ", "–†–æ–∑–æ–≤–æ–µ", "–ò–≥—Ä–∏—Å—Ç–æ–µ", "–õ—é–±–æ–π"]],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  });
}

async function handleWineTypeInput(chatId, wineType) {
  userStates[chatId].wineType = wineType;
  userStates[chatId].state = States.AWAITING_WINE_SWEETNESS;
  await bot.sendMessage(chatId, "–ö–∞–∫—É—é —Å–ª–∞–¥–æ—Å—Ç—å –≤–∏–Ω–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", {
    reply_markup: JSON.stringify({
      keyboard: [["–°—É—Ö–æ–µ", "–ü–æ–ª—É—Å—É—Ö–æ–µ", "–ü–æ–ª—É—Å–ª–∞–¥–∫–æ–µ", "–°–ª–∞–¥–∫–æ–µ", "–õ—é–±—É—é"]],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  });
}

async function handleWineSweetnessInput(chatId, wineSweetness) {
  userStates[chatId].wineSweetness = wineSweetness;
  userStates[chatId].state = States.AWAITING_WINE_PRICE;
  await bot.sendMessage(chatId, "–ö–∞–∫–æ–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", {
    reply_markup: JSON.stringify({
      keyboard: [["–ë—é–¥–∂–µ—Ç–Ω–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–ü—Ä–µ–º–∏—É–º", "–õ—é–±–æ–π"]],
      resize_keyboard: true,
      one_time_keyboard: true,
    }),
  });
}

async function handleWinePriceInput(chatId, winePrice) {
  userStates[chatId].winePrice = winePrice;
  userStates[chatId].state = States.GENERATING_RECOMMENDATION;
  await bot.sendMessage(
    chatId,
    "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤–∏–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –ø–æ–≥–æ–¥—É, –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
  );

  const recommendation = await generateWineRecommendation(userStates[chatId]);
  await bot.sendMessage(chatId, recommendation);

  sendMainMenu(chatId, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?");
  delete userStates[chatId];
}

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
